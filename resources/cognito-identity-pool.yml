Resources:
  # Identity Poool
  CognitoIdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: ${self:service}_${self:custom.stage}_pool
      AllowUnauthenticatedIdentities: true
      # Link to our User Pool
#      CognitoIdentityProviders:
#        - ClientId:
#            Ref: CognitoUserPoolClient
#          ProviderName:
#            Fn::GetAtt: [ "CognitoUserPool", "ProviderName" ]
  CognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: CognitoIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt: [CognitoAuthRole, Arn]
        unauthenticated:
          Fn::GetAtt: [CognitoUnauthRole, Arn]
  CognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "${self:service}_${self:custom.stage}_appAuthRole"
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud":
                  Ref: CognitoIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "execute-api:Invoke"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "s3:ListBucket"
                Resource:
                  - "arn:aws:s3:::${self:custom.prefix}-userfiles"
                Condition:
                  StringLike:
                    "s3:prefix":
                      {Fn::Join: ['', ["$","{cognito-identity.amazonaws.com:sub}"]]}

  CognitoUnauthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "${self:service}_${self:custom.stage}_appUnauthRole"
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud":
                  Ref: CognitoIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.notesTableName}"
                  - "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.notesTableName}/*"
                  - "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.analysisTableName}"
                  - "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.analysisTableName}/*"
              - Effect: "Allow"
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                Resource:
                  - "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.usersTableName}"
              - Effect: "Allow"
                Action:
                  - comprehend:DetectEntities
                Resource:
                  - "*"

# Print out the Id of the Identity Pool that is created
Outputs:
  identityPoolId:
    Value:
      Ref: CognitoIdentityPool
  region:
    Value: ${self:provider.region}
